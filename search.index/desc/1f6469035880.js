rd_("BlA unique identifier for each active service.CdA simple PRNG trait for use within tower middleware.ClReturns the number of endpoints currently tracked by the \xe2\x80\xa6CbReturns the total number of services in the cache.EbWraps a <code>T</code>-typed service with a constant <code>M</code>-typed load \xe2\x80\xa6CmWraps a future, propagating the tracker into its value if \xe2\x80\xa6DhWraps an <code>S</code>-typed service so that its load is tracked by \xe2\x80\xa6FdWraps a <code>D</code>-typed <code>Discover</code> so that services have a <code>PeakEwma</code> \xe2\x80\xa61DdWraps a <code>Discover</code>, wrapping all of its services with \xe2\x80\xa6BoBuild balancers using operating system entropy.0CiConstructs a load balancer that uses operating system \xe2\x80\xa6DlCreates a new <code>BufferLayer</code> with the provided <code>bound</code>.D`Creates a new <code>Buffer</code> wrapping <code>service</code>.DkReturns a new layer that produces <code>Filter</code> services with the \xe2\x80\xa6DgReturns a new layer that produces <code>AsyncFilter</code> services \xe2\x80\xa6DfReturns a new <code>Filter</code> service wrapping <code>inner</code>.DkReturns a new <code>AsyncFilter</code> service wrapping <code>inner</code>.AnCreate a new hedge middleware.BeCreate a new concurrency limit layer.CfCreate a new <code>GlobalConcurrencyLimitLayer</code>.BaCreate a new concurrency limiter.AlCreate new rate limit layer.AbCreate a new rate.AiCreate a new rate limiterC`Create a new <code>Shared</code> from a service.CgLazily connect and reconnect to a <code>Service</code>.CjCreates a new <code>RetryLayer</code> from a retry policy.CnRetry the inner service depending on this <code>Policy</code>.BmCreate a new <code>ExponentialBackoff</code>.DhCreate a <code>TpsBudget</code> that allows for a certain percent of \xe2\x80\xa6F`Make a new <code>Steer</code> with a list of <code>Service</code>\xe2\x80\x99s and a <code>Picker</code>.B`Create a timeout from a durationBbCreates a new <code>Timeout</code>AmConstruct a new elapsed errorBcCreate a new <code>BoxLayer</code>.BoCreate a new <code>BoxCloneServiceLayer</code>.CcCreate a new <code>BoxCloneSyncServiceLayer</code>.BjCreate a new <code>BoxCloneService</code>.BnCreate a new <code>BoxCloneSyncService</code>.BkCreates a new <code>AndThen</code> service.BnCreates a new <code>AndThenLayer</code> layer.BkCreate new <code>CallAll</code> combinator.CdCreate new <code>CallAllUnordered</code> combinator.CnReturns a new <code>FutureService</code> for the given future.BjCreates a new <code>MapErr</code> service.BgCreates a new <code>MapErrLayer</code>.BnCreates a new <code>MapRequest</code> service.BkCreates a new <code>MapRequestLayer</code>.BoCreates a new <code>MapResponse</code> service.CbCreates a new <code>MapResponseLayer</code> layer.BmCreates a new <code>MapResult</code> service.C`Creates a new <code>MapResultLayer</code> layer.BmCreates a new <code>MapFuture</code> service.C`Creates a new <code>MapFutureLayer</code> layer.BcCreate a new <code>Optional</code>.BhCreates a new <code>Then</code> service.BkCreates a new <code>ThenLayer</code> layer.BlCreate a new default <code>HasherRng</code>.AdCreates a new layer.CdWraps a service in <code>LoadShed</code> middleware.B`Construct a new overloaded errorBfBuilds a <code>SpawnReadyLayer</code>.DdCreates a new <code>SpawnReady</code> wrapping <code>service</code>.BiCreate a new <code>ServiceBuilder</code>.BdCreates a new <code>Identity</code>.BaCreates a new <code>Stack</code>.10AcCreate a new spawn.ClThis module implements the \xe2\x80\x9cPower of Two Random Choices\xe2\x80\xa6BdPRNG utilities for tower middleware.ChRepresents the relative cost of communicating with a \xe2\x80\xa6CkTypes that implement this trait can give an estimate of \xe2\x80\xa6nA mock serviceDbError returned if the inner <code>Service</code> has not been set.BcA rate of requests per time period.Db<code>Service</code> returned by the <code>then</code> combinator.CkProcess the request and return the response asynchronously.0AgCall the inner Service.AoReturns the argument unchanged.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BaCalls <code>U::from(self)</code>.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AhService load measurementBfEstimate the service\xe2\x80\x99s current load.CmTrait aliases for Services that produce specific types of \xe2\x80\xa6CdMock <code>Service</code> that can be used in tests.EdCreates a new <code>Buffer</code> wrapping <code>service</code>, but returns the \xe2\x80\xa6ClCreate a new <code>Mock</code> and <code>Handle</code> pair.DgReturn an index into the iterator of <code>Service</code> passed to \xe2\x80\xa6BjPushes a new service onto the pending set.BoLimit the rate at which requests are processed.CnComposes an asynchronous function <em>after</em> this service.0CeApply an asynchronous function after the service, \xe2\x80\xa6AnUtilities for combining layersCjVarious utility types and functions that are generally \xe2\x80\xa6ClRepresents the number of currently-pending requests to a \xe2\x80\xa6AoErrors produced by the service.AnErrors produced by the serviceAoError produced during discoveryBiErrors produced by the connecting service23CjA middleware that pre-emptively retries requests which \xe2\x80\xa6DhDecorates a <code>Service</code>, transforming either the request or \xe2\x80\xa600CkA future that yields a mutable reference to the service \xe2\x80\xa6CfConfigure retrying requests of \xe2\x80\x9cfailed\xe2\x80\x9d responses.AnService spawned on a mock taskBiTwo <code>Layer</code>s chained together.0Eh<code>Steer</code> manages a list of <code>Service</code>s which all handle the same \xe2\x80\xa6BbAllow a certain number of requestsEaConvert the service into a <code>Service</code> + <code>Send</code> trait object.0DhThis wraps the inner service with the <code>Layer</code> returned by \xe2\x80\xa6AdA cache of services.CdCheck whether the given request should be forwarded.0DeCheck a <code>Request</code> value against this filter\xe2\x80\x99s predicate.0CkError types for the <code>tower::balance</code> middleware.CcError types for the <code>Buffer</code> middleware.kError types00fErrors1AnEvicts an item from the cache.ClPre-emptively retry requests which have been outstanding \xe2\x80\xa6CgA collection of <code>Layer</code> based tower servicesCkWrap the given service with the middleware, returning a \xe2\x80\xa6EcReturns a new <code>Layer</code> that wraps services with a <code>Filter</code> \xe2\x80\xa6EeReturns a new <code>Layer</code> that wraps services with an <code>AsyncFilter</code>FaReturns a <code>Layer</code> for wrapping a <code>Service</code> in a <code>BoxService</code> \xe2\x80\xa6DjReturns a <code>Layer</code> for wrapping a <code>Service</code> in an \xe2\x80\xa6FbReturns a <code>Layer</code> for wrapping a <code>Service</code> in a <code>BoxCloneService</code>DiReturns a <code>Layer</code> for wrapping a <code>Service</code> in a \xe2\x80\xa6DmReturns a new <code>Layer</code> that produces <code>AndThen</code> services.DlReturns a new <code>Layer</code> that produces <code>MapErr</code> services.E`Returns a new <code>Layer</code> that produces <code>MapRequest</code> services.EaReturns a new <code>Layer</code> that produces <code>MapResponse</code> services.DoReturns a new <code>Layer</code> that produces <code>MapResult</code> services.DoReturns a new <code>Layer</code> that produces <code>MapFuture</code> services.DjReturns a new <code>Layer</code> that produces <code>Then</code> services.DaCreates a layer that wraps services with <code>SpawnReady</code>.DdAdd a new layer <code>T</code> into the <code>ServiceBuilder</code>.??BgTower middleware for limiting requests.CnYields a mutable reference to the service when it is ready \xe2\x80\xa60BnMiddleware for retrying \xe2\x80\x9cfailed\xe2\x80\x9d requests.ChCheck the policy if a certain request should be retried.CjRetry failed requests according to the given retry policy.BaSpawn a Service onto a mock task.BeSpawn mock services onto a mock task.CnThis module provides functionality to aid managing routing \xe2\x80\xa6Db<code>async fn(Request) -&gt; Result&lt;Response, Error&gt;</code>DhFor more info about <code>Budget</code>, please see the module-level \xe2\x80\xa6CaAdds an mpsc buffer in front of an inner service.AlA change in the service set.CiAn error produced when the a buffer\xe2\x80\x99s worker closes \xe2\x80\xa6CkError yielded when a mocked service does not yet accept \xe2\x80\xa6CgCombine two different service types into a single type.DhAn error indicating that the service with a <code>K</code>-typed key \xe2\x80\xa6CnConditionally dispatch requests to the inner service based \xe2\x80\xa6AjThe future response value.C`The future of the <code>Service</code> instance.BjThe future returned by <code>check</code>.CaThe future that eventually produces the transport2DdThe <code>Future</code> type returned by <code>Policy::retry</code>.CnThe future associated with each backoff. This usually will \xe2\x80\xa6DcThe <code>Future</code> returned by the <code>Hedge</code> service.6ClTracks an in-flight request and updates the RTT-estimate \xe2\x80\xa6BoTracks an in-flight request by reference count.B`Handle to the <code>Mock</code>.CnA new service identified by key <code>K</code> was identified.ChService returned by the <code>map_err</code> combinator.AiA comparable load metric.AlThe instrumented value type.FcThis is how callers of <code>Steer</code> tell it which <code>Service</code> a <code>Req</code> \xe2\x80\xa6CmA policy which describes which requests can be cloned and \xe2\x80\xa6CkA \xe2\x80\x9cretry policy\xe2\x80\x9d to classify if a request should be \xe2\x80\xa6CiThe service identified by key <code>K</code> disappeared.DiA <code>MakeService</code> that produces services by cloning an inner \xe2\x80\xa6CnA retry \xe2\x80\x9cbudget\xe2\x80\x9d for allowing only a certain amount of \xe2\x80\xa6CiMiddleware that provides a buffered mpsc channel to a \xe2\x80\xa6CaBuffer requests when the next layer is not ready.CnConditionally dispatch requests to the inner service based \xe2\x80\xa6DgComposes this service with a <code>Filter</code> that conditionally \xe2\x80\xa60CnConditionally reject requests based on <code>predicate</code>.CdFuture types for the <code>Buffer</code> middleware.lFuture typesAi<code>Future</code> types11111AjBackground readiness types2CiService returned by the <code>and_then</code> combinator.BhThe backoff type produced by this maker.CdA backoff trait where a single mutable reference \xe2\x80\xa6ChEfficiently distributes requests across an arbitrary \xe2\x80\xa6DiThis is a <code>Stream</code> of responses resulting from calling the \xe2\x80\xa6AdThe timeout elapsed.EhA <code>Layer</code> implemented by a closure. See the docs for <code>layer_fn</code>\xe2\x80\xa60EeA <code>Future</code> consuming a <code>Service</code> and request, waiting until \xe2\x80\xa6CdThe type of requests returned by <code>check</code>.0AcThe wrapped serviceCfThe <code>Service</code> value created by this factoryDgThe type of <code>Service</code> yielded by this <code>Discover</code>.12E`An asynchronous function from a <code>Request</code> to a <code>Response</code>.30AnApplies a timeout to requests.CmThis module contains generic backoff utilities to be used \xe2\x80\xa6ChMiddleware that allows balancing load among multiple \xe2\x80\xa6BlBuilder types to compose layers and servicesCnStore a \xe2\x80\x9cdeposit\xe2\x80\x9d in the budget, which will be used to \xe2\x80\xa6BlGet a mutable reference to the inner service000000BmGet a mutable reference to the inner service.BdGet a reference to the inner service000000BeGet a reference to the inner service.CkMaps this service\xe2\x80\x99s error value to a different value. \xe2\x80\xa60AnMap one error type to another.DkConsume this <code>Service</code>, calling it with the provided request \xe2\x80\xa60DhWrap the service <code>S</code> with the middleware provided by this \xe2\x80\xa6BnMiddleware that applies a timeout to requests.CiFail requests that take longer than <code>timeout</code>.BcAlias for a type-erased error type.BhA boxed <code>Layer</code> trait object.DfWraps a type so that it implements <code>Load</code> and returns a \xe2\x80\xa6CbThe balancer\xe2\x80\x99s endpoint discovery stream failed.BoA dynamically changing set of related services.AcA no-op middleware.0DiA <code>Service</code> that sheds load when the inner service isn\xe2\x80\x99t \xe2\x80\xa6CaOptionally forwards requests to an inner service.CeMeasures the load of the underlying service using \xe2\x80\xa6AoResponses given by the service.AnResponses given by the service01CgExecutes a new future after this service\xe2\x80\x99s future \xe2\x80\xa600DjProcess all requests from the given <code>Stream</code>, and produce a \xe2\x80\xa60AaService discoveryCnConstructs a load balancer seeded with the provided random \xe2\x80\xa6BmReturns whether or not the balancer is empty.CkReturns whether or not there are any services in the cache.BhCheck if this service has been woken up.DiAdd a <code>Layer</code> built from a function that accepts a service \xe2\x80\xa6EhReturns a new <code>LayerFn</code> that implements <code>Layer</code> by calling the \xe2\x80\xa60CoGenerate a random <code>f64</code> between <code>[0, 1)</code>.BcGenerate a random <code>u64</code>.BgFuture types for <code>Optional</code>.BfError types for <code>Optional</code>.CmCheck whether there is enough \xe2\x80\x9cbalance\xe2\x80\x9d in the budget \xe2\x80\xa6CiService returned by <code>MakeService::as_service</code>.EeA <code>Rng</code> implementation that uses a <code>Hasher</code> to generate the \xe2\x80\xa6BiErrors produced while building a service.0Dh<code>Service</code> returned by the <code>map_future</code> combinator.CkService returned by the <code>map_result</code> combinator.AoChecks a request synchronously.CgEnforces a rate limit on the number of requests the \xe2\x80\xa6AmReconnect to failed services.C`A <code>Service</code> implemented by a closure.CoA <code>Layer</code> that produces a <code>Then</code> service.CkA Transactions Per Minute config for managing retry tokens.ClCalled after the hedge timeout to determine if the hedge \xe2\x80\xa6CiObtains a reference to a service in the ready set by key.CmMiddleware for shedding load when inner services aren\xe2\x80\x99t \xe2\x80\xa6CmDrop requests when the next layer is unable to respond to \xe2\x80\xa6DcA <code>Load</code> implementation that measures load using the \xe2\x80\xa6BeYields the next discovery change set.0C`Returns the number of services in the ready set.BbReconnect services when they fail.CiReturn responses as they are ready, regardless of the \xe2\x80\xa6CaA boxed <code>Service + Send</code> trait object.BfThe transport provided by this serviceAfKey equivalence trait.BeA <code>Balance</code> in the making.CkService returned by the <code>MapRequest</code> combinator.DjAn error returned by <code>LoadShed</code> when the underlying service \xe2\x80\xa6BhDrives readiness over a set of services.B`Retry requests based on a policyDkAn extension trait for <code>Service</code>s that provides a variety of \xe2\x80\xa60CdSpawns tasks to drive an inner service to readiness.C`Response future from <code>Then</code> services.EgConvert this <code>MakeService</code> into a <code>Service</code> without consuming \xe2\x80\xa600AmCalls a ready service by key.CbApplication-specific request completion semantics.E`Compare self to <code>key</code> and return <code>true</code> if they are equal.CfConsume <code>self</code>, returning the inner service00000BiExtract the wrapped <code>Service</code>.01CiReturns the underlying <code>Layer</code> implementation.AfGet the inner service.CeReturns an iterator over the ready keys and services.CkComposes a function that transforms futures produced by \xe2\x80\xa600BfMaps this service\xe2\x80\x99s result type (\xe2\x80\xa600BgRandomly pick a value within the range.DhReturns <code>Poll::Ready(Ok(()))</code> when the service is able to \xe2\x80\xa6DgReturns <code>Poll::Ready</code> when the factory is able to create \xe2\x80\xa6DiReturns <code>Poll::Ready(Ok(()))</code> when it is able to make more \xe2\x80\xa612AhPoll this service ready.DbLimit requests to at most <code>num</code> per the given duration.CfMake the next poll_ method error with the given error.CmResolve the pending request future for the linked request \xe2\x80\xa6ClReturns a new <code>ServiceFn</code> with the given closure.0DjWrap the async function <code>F</code> with the middleware provided by \xe2\x80\xa6CaSpawn a Service via the provided wrapper closure.CdMock <code>Service</code> that can be used in tests.CdTransactions Per Minute (Tps) Budget implementationsCnConditionally dispatch requests to the inner service based \xe2\x80\xa6CaAdds an mpsc buffer in front of an inner service.1CkService returned by <code>MakeService::into_service</code>.D`Trait used to construct <code>Backoff</code> trait implementors.CgConstructs load balancers over dynamic service sets \xe2\x80\xa6BhCreates new <code>Service</code> values.0D`A <code>Layer</code> that produces <code>MapErr</code> services.CmService returned by the <code>map_response</code> combinator.CmStatic service discovery based on a predetermined list of \xe2\x80\xa6FbConvert the service into a <code>Service</code> + <code>Clone</code> + <code>Send</code> trait \xe2\x80\xa60DhThis wraps the inner service with the <code>Layer</code> returned by \xe2\x80\xa6CeCheck that the builder implements <code>Clone</code>.C`Checks whether the referenced endpoint is ready.CgLimit the max number of requests being concurrently \xe2\x80\xa6CeComposes a function <em>in front of</em> the service.0B`Map one request type to another.CbReturns the number of services in the unready set.AcA cache of servicesBbSpawn a layer onto a mock service.ChWhen an underlying service is not ready, drive it to \xe2\x80\xa6AlLayer traits and extensions.CmCreate a new <code>HasherRng</code> with the provided hasher.DbA <code>Layer</code> that produces a <code>AndThen</code> service.CbResponse future from <code>MapErr</code> services.DeA <code>Future</code> that yields the service when it is ready to \xe2\x80\xa6BoSend a response in reply to a received request.DlAn error produced by a <code>Service</code> wrapped by a <code>Buffer</code>CbResponse future from <code>Shared</code> services.ChApplies a timeout to requests via the supplied inner \xe2\x80\xa6CoComposes this service with an <code>AsyncFilter</code> that \xe2\x80\xa60CjConditionally reject requests based on an asynchronous \xe2\x80\xa6EaConsume this <code>MakeService</code> and convert it into a <code>Service</code>.00AnConstructs a new backoff type.CeCreate and return a new service value asynchronously.0CnMaps this service\xe2\x80\x99s response value to a different value. \xe2\x80\xa60BaMap one response type to another.BjInitiate the next backoff in the sequence.AfGets the next request.DfConvert an <code>Option&lt;Layer&gt;</code> into a <code>Layer</code>.DoOptionally add a new layer <code>T</code> into the <code>ServiceBuilder</code>.CnPolls services pending readiness, adding ready services to \xe2\x80\xa6BdAsynchronously gets the next requestBiExtract the wrapped <code>Service</code>.0CcResponse future from <code>AndThen</code> services.EgA type that implements <code>Service</code> for a <code>Future</code> that produces \xe2\x80\xa6DjA <code>Layer</code> to wrap services in <code>LoadShed</code> middleware.DfCheck that the builder when given a service of type <code>S</code> \xe2\x80\xa6CmCalled when the request is first received to determine if \xe2\x80\xa6CmTries to clone a request before being passed to the inner \xe2\x80\xa6CmObtains a mutable reference to a service in the ready set \xe2\x80\xa6BeYields the next discovery change set.ChYields the service when it is ready to accept a request.0CmResolve the pending request future for the linked request \xe2\x80\xa6CjDefinition of the core <code>Service</code> trait to TowerB`Checks a request asynchronously.AiBackoff validation error.DcThe <code>MakeConnection</code> trait is used to create transports.DdA <code>Layer</code> that produces a <code>MapFuture</code> service.DdA <code>Layer</code> that produces a <code>MapResult</code> service.CgEnforces a rate limit on the number of requests the \xe2\x80\xa6CnFuture that completes when the buffered service eventually \xe2\x80\xa6CkFiltered response future from <code>Filter</code> services.CeFuture for the <code>ConcurrencyLimit</code> service.CkFuture that resolves to the response or failure to connect.DaThe <code>Future</code> returned by a <code>Retry</code> service.Bd<code>Timeout</code> response futureCbResponse future returned by <code>Optional</code>.BmFuture for the <code>LoadShed</code> service.CfResponse future from <code>SpawnReady</code> services.BiFuture of the <code>Mock</code> response.CdDeclaratively construct <code>Service</code> values.0CnReturns a new <code>FutureService</code> for the given future.CfReturns a mutable iterator over the ready keys and \xe2\x80\xa6D`Create a new <code>GlobalConcurrencyLimitLayer</code> from a \xe2\x80\xa6CkCreate a new concurrency limiter with a provided shared \xe2\x80\xa6DdA <code>Clone</code> + <code>Send</code> boxed <code>Service</code>.DdA <code>Layer</code> that produces <code>MapRequest</code> services.CeResponse future from <code>MapResult</code> services.CiMeasures the load of the underlying service using the \xe2\x80\xa6CeSpawns tasks to drive its inner service to readiness.E`Attaches <code>H</code>-typed completion tracker to <code>V</code> typed values.CkObtains a reference to a service in the ready set by index.BmConnect and return a transport asynchronouslyBoGet how many futurs are holding onto the waker.CfReconnect to a already connected <code>Service</code>.CnConditionally dispatch requests to the inner service based \xe2\x80\xa6ClA stream of responses received from the inner service in \xe2\x80\xa6CmEnforces a limit on the concurrent number of requests the \xe2\x80\xa6DhConstruct load balancers (<code>Balance</code>) over dynamic service \xe2\x80\xa6DfA <code>Layer</code> that produces a <code>MapResponse</code> service.EhWraps a <code>D</code>-typed stream of discovered services with <code>PeakEwma</code>\xe2\x80\xa6BjA boxed <code>Service</code> trait object.DhThis wraps the inner service with the <code>Layer</code> returned by \xe2\x80\xa6AoCalls a ready service by index.CeReturns true iff the given key is in the unready set.DjA <code>Load</code> implementation that measures load using the number \xe2\x80\xa6DgAttaches a <code>H</code>-typed handle to a <code>V</code>-typed value.CgResponse future from <code>MapResponse</code> services.CmAsserts that the mock handle receives a new request equal \xe2\x80\xa6C`Checks whether the referenced endpoint is ready.BkLimit the max number of in-flight requests.DdA <code>TrackCompletion</code> implementation that considers the \xe2\x80\xa6BhA jittered exponential backoff strategy.D`Filtered response future from <code>AsyncFilter</code> services.EhA <code>Clone</code> + <code>Send</code> + <code>Sync</code> boxed <code>Service</code>.DfCheck that the builder when given a service of type <code>S</code> \xe2\x80\xa6CmObtains a mutable reference to a service in the ready set \xe2\x80\xa6DbA <code>Clone</code> + <code>Send</code> boxed <code>Layer</code>.BhResponse future for <code>Either</code>.CmEnforces a limit on the concurrent number of requests the \xe2\x80\xa6EhAttaches a <code>C</code>-typed completion tracker to the result of an <code>F</code>\xe2\x80\xa6CaA maker type for <code>ExponentialBackoff</code>.DcWraps a <code>D</code>-typed stream of discovered services with \xe2\x80\xa6CnA hedge middleware with a prepopulated latency histogram.  \xe2\x80\xa6EfA <code>Clone</code> + <code>Send</code> + <code>Sync</code> boxed <code>Layer</code>.5")